x <<- 0
x <<- x + 1
y <<- 0
shinyServer(
function(input, output) {
y <<- y + 1
output$text1 <- renderText({input$text1})
output$text2 <- renderText({input$text2})
output$text3 <- renderText({as.numeric(input$text1)+1})
output$text4 <- renderText(y)
output$text5 <- renderText(x)
}
)
runApp()
library(shiny)
runApp(display.mode='showcase')
install.packages("manipulate")
library(manipulate)
install.packages("rcharts")
install.packages("rcharts", type = source)
install.packages("rcharts", type = "source")
library(devtools)
install_github('rCharts', 'ramnathv')
install.packages("rCharts")
install_github('ramnathv/rCharts')
library(rCharts)
require(devtools)
install_github('rstudio/shinyapps')
library(shinyapps)
install_github('ropensci/plotly')
library(plotly)
install.packages("roxygen2")
library(roxygen2)
install.packages("testhat")
install.packages("testhat", type = "source")
install.packages("testthat")
library(testthat)
install.packages("yhat")
library(yhat)
install.packages("yhatr")
library(yhatr)
install.packages(c("gridExtra", "lattice", "manipulate", "rattle"))
data(titanic)
library(datasets)
head(titanic)
head(Titanic)
str(Titanic)
dim(Titanic)
str(beavers)
library(datasets)
str(faithful)
?faithful
summary(faithful)
g <- ggplot(faithful, aes(x = waiting, y = eruptions))
library(ggplot2)
g <- ggplot(faithful, aes(x = waiting, y = eruptions))
g <- g + geom_point()
g
g <- g + geom_point(colour = "aqua")
g
g <- g + geom_point(colour = "steelblue")
g
g <- g + geom_point(colour = "steelblue")
g
g <- ggplot(faithful, aes(x = waiting, y = eruptions))
g <- g + geom_point(colour = "steelblue")
g
library(MASS)
?Geyser
?geyser
str(geyser)
summary(geyser)
g <- ggplot(geyser, aes(x = waiting, y = duration))
g <- g + geom_point(colour = "steelblue")
g <- labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- ggplot(geyser, aes(x = waiting, y = duration))
g <- g + geom_point(colour = "steelblue")
g <- labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- labs(x = "Time To Next Eruption (Seconds)",
y = "Duration Of Eruption (Seconds)")
g
g <- ggplot(geyser, aes(x = waiting, y = duration))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(x = "Time To Next Eruption (Seconds)",
y = "Duration Of Eruption (Seconds)")
g
g <- ggplot(geyser, aes(x = duration, y = waiting))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(y = "Time To Next Eruption (Seconds)",
x = "Duration Of Eruption (Seconds)")
g
?geyser
?faithful
library(dataset)
df <- faithful
df$waitSecs  <- df$waiting / 60
df$eruptSecs <- df$eruptions / 60
str(df)
g <- ggplot(geyser, aes(x = waitSecs, y = eruptSecs))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(x = "Time To Next Eruption (Seconds)",
y = "Duration Of Eruption (Seconds)")
g
g <- ggplot(df, aes(x = waitSecs, y = eruptSecs))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(x = "Time To Next Eruption (Seconds)",
y = "Duration Of Eruption (Seconds)")
g
df <- faithful
df$waitSecs  <- df$waiting   * 60
df$eruptSecs <- df$eruptions * 60
str(df)
g <- ggplot(df, aes(x = waitSecs, y = eruptSecs))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(x = "Time To Next Eruption (Seconds)",
y = "Duration Of Eruption (Seconds)")
g
g <- ggplot(faithful, aes(x = waitSecs, y = eruptSecs))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(x = "Time To Next Eruption (Minutes)",
y = "Duration Of Eruption (Minutes)")
g
g <- ggplot(faithful, aes(x = waiting, y = eruptions))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(x = "Time To Next Eruption (Minutes)",
y = "Duration Of Eruption (Minutes)")
g
summary(faithful)
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(y = "Time To Next Eruption (Minutes)",
x = "Duration Of Eruption (Minutes)")
g
library(MASS)
?geyser
install.packages("sm")
library(sm)
summary(geyser)
str(geyser)
summary(geyser)
g <- ggplot(geyser, aes(x = duration, y = waiting))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Old Faithful Waiting Times vs. Eruption Duration")
g <- g + labs(y = "Waiting Time For This Eruption (Minutes)")
g <- g + labs(x = "Duration Of Eruption (Minutes)")
g
plot(geyser)
library(datasets)
?Titanic
str(Titanic)
summary(Titanic)
table(Titanic)
?cars
str(cars)
summary(cars)
g <- ggplot(cars, aes(x = speed, y = dist))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Speed vs. Stopping Distance Of Cars")
g <- g + labs(x = "Speed (MPH)")
g <- g + labs(x = "Stopping Distance (Feet)")
g
mod <- lm(dist ~ speed, data = speed)
mod <- lm(dist ~ speed, data = cars)
mod
summary(mod)
cor(mod)
cor(dist ~ speed, data = cars)
cor(cars$dist, cars$speed)
mod$r.squared
mod$r-squared
g <- ggplot(cars, aes(x = speed, y = dist))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Speed vs. Stopping Distance Of Cars")
g <- g + labs(x = "Speed (MPH)")
g <- g + labs(x = "Stopping Distance (Feet)")
g <- g + geom_smooth(method = "lm", colour = "red")
g
?geom_smooth
summary(mod)$r.squared
sqrt(summary(mod)$r.squared)
cor(cars$dist, cars$speed)
predict(mod, 7)
newdata <- data.frame(dist = 7)
predict(mod, newdata)
summary(mod)$r.squared
newdata <- data.frame(speed = 7)
predict(mod, newdata)
round(predict(mod, newdata), 2)
summary(cars)
newdata <- data.frame(speed = 0)
round(predict(mod, newdata), 2)
newdata <- data.frame(speed = 4)
round(predict(mod, newdata), 2)
newdata <- data.frame(speed = 5)
round(predict(mod, newdata), 2)
newdata <- data.frame(speed = 4.5)
round(predict(mod, newdata), 2)
g <- ggplot(cars, aes(x = speed, y = dist))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Speed vs. Stopping Distance Of Cars")
g <- g + labs(x = "Speed (MPH)")
g <- g + labs(y = "Stopping Distance (Feet)")
g <- g + geom_smooth(method = "lm", colour = "red")
g
newdata <- data.frame(speed = 25)
round(predict(mod, newdata), 2)
newdata <- data.frame(speed = 60)
round(predict(mod, newdata), 2)
newdata <- data.frame(speed = 25)
round(predict(mod, newdata), 2)
?cars
mod
summary(mod)$coeff
beta0 <- summary(mod)$coeff[1]
beta0
summary(mod)$coeff[2]
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
g <- ggplot(cars, aes(x = speed, y = dist))
g <- g + geom_point(colour = "steelblue")
g <- g + labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s")
g <- g + labs(x = "Speed (MPH)")
g <- g + labs(y = "Stopping Distance (Feet)")
g <- g + geom_smooth(method = "lm", colour = "red")
g
ggplot(cars, aes(x = speed, y = dist)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)") +
geom_smooth(method = "lm", colour = "red")
ggplot(cars, aes(x = speed, y = dist), ylim = c(0, 125)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)") +
geom_smooth(method = "lm", colour = "red")
ggplot(cars, aes(x = speed, y = dist), ylim = c(0, 125)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)")
ggplot(cars, aes(x = speed, y = dist)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)") +
geom_smooth(method = "lm", colour = "red")
ggplot(cars, aes(x = speed, y = dist)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)") +
geom_smooth(method = "lm", colour = "red", se = FALSE)
geom_smooth(method = "lm", colour = "red", se = TRUE)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)") +
geom_smooth(method = "lm", colour = "red", se = TRUE)
plot(mod$residuals ~ cars$speed) # Residucals vs Explanatory
abline(h = 0, lty = 3) # Add A Horizontal Dashed Line At y = 0
abline(h = 0, lty = 3, colour = "blue") # Add A Horizontal Dashed Line At y = 0
abline(h = 0, lty = 3, color = "blue") # Add A Horizontal Dashed Line At y = 0
abline(h = 0, lty = 3, col = "blue") # Add A Horizontal Dashed Line At y = 0
?abline
?abline
plot(mod$residuals ~ cars$speed) # Residuals vs Explanatory
abline(h = 0, lty = 3, col = "blue") # Add A Horizontal Line At y = 0
hist(mod$residuals)
qqnorm(mod$residuals)
qqline(mod$residuals)
library(ggplot2)
library(datasets)
?cars
str(cars)
summary(cars)
plot(cars)
boxplot(cars)
ggplot(cars, aes(x = speed, y = dist)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (MPH)", y = "Stopping Distance (Feet)") +
geom_smooth(method = "lm", colour = "red", se = TRUE)
mod <- lm(dist ~ speed, data = cars)
cor(cars$dist, cars$speed)
summary(mod)$r.squared
sqrt(summary(mod)$r.squared)
plot(mod$residuals ~ cars$speed)
abline(h = 0, lty = 3, col = "blue")
hist(mod$residuals)
qqnorm(mod$residuals)
qqline(mod$residuals)
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
newdata <- data.frame(speed = 25)
round(predict(mod, newdata), 2)
stopDist <- function(x) {
# Load Required Libraries:
library(dataset)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Predict The New Distance:
newdata <- data.frame(speed = x)
round(predict(mod, newdata), 2)
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Predict The New Distance:
newdata <- data.frame(speed = x)
round(predict(mod, newdata), 2)
}
stopDist(25)
d <- stopDist(25)
d
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
# Return Estimated Distance, beta0, & beta1
c("distance" = d, "beta0" = beta0, "beta1" = beta1)
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
str(d)
# Return Estimated Distance, beta0, & beta1
c("distance" = d, "beta0" = beta0, "beta1" = beta1)
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
str(d)
# Return Estimated Distance, beta0, & beta1
c(d, beta0, beta1)
}
## Test The Function:
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
str(d)
# Return Estimated Distance, beta0, & beta1
rvect <- c(d, beta0, beta1)
names(rvect) <- c("distance", "beta0", "beta1")
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
# Return Estimated Distance, beta0, & beta1
rvect <- c(d, beta0, beta1)
names(rvect) <- c("distance", "beta0", "beta1")
return(rvect)
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Get The Fit:
rsquared <- summary(mod)$r.squared
corcoeff <- sqrt(summary(mod)$r.squared)
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
# Return Estimated Distance, beta0, & beta1
rvect <- c(d, beta0, beta1, rsquared, corecoeff)
names(rvect) <- c("distance", "beta0", "beta1", "R-squared", "r")
return(rvect)
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Get The Fit:
rsquared <- summary(mod)$r.squared
corcoeff <- sqrt(summary(mod)$r.squared)
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
# Return Estimated Distance, beta0, & beta1
rvect <- c(d, beta0, beta1, rsquared, corcoeff)
names(rvect) <- c("distance", "beta0", "beta1", "R-squared", "r")
return(rvect)
}
stopDist(25)
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Get The Fit:
rsquared <- summary(mod)$r.squared
corcoeff <- sqrt(summary(mod)$r.squared)
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
# Return Estimated Distance, beta0, & beta1
rvect <- c(d, beta0, beta1, corcoeff, rsquared)
names(rvect) <- c("distance", "beta0", "beta1", "r", "R^2")
return(rvect)
}
stopDist(25)
stopDist(25)[1]
stopDist(25)[5]
stopDist(25)[1]
stopDist <- function(x) {
# Load Required Libraries:
library(datasets)
# Fit The Model:
mod <- lm(dist ~ speed, data = cars)
# Get The Coefficients For The Line:
beta0 <- summary(mod)$coeff[1]
beta1 <- summary(mod)$coeff[2]
# Get The Fit:
rsquared <- summary(mod)$r.squared
corcoeff <- sqrt(summary(mod)$r.squared)
# Predict The New Distance:
newdata <- data.frame(speed = x)
d <- round(predict(mod, newdata), 2)
# Return Estimated Distance, beta0, & beta1
rvect <- c(d, beta0, beta1, corcoeff, rsquared)
names(rvect) <- c("distance", "beta0", "beta1", "r", "R^2")
return(rvect)
}
## Test The Function:
stopDist(25)
stopDist(25)[1]
ggplot(cars, aes(x = speed, y = dist)) +
geom_point(colour = "steelblue") +
labs(title = "Speed vs. Stopping Distance Of Cars In The 1920s") +
labs(x = "Speed (mph)", y = "Stopping Distance (ft)") +
geom_smooth(method = "lm", colour = "red", se = TRUE)
library(slidify)
slidify("index.Rmd")
setwd("DS09_Slidify_Pres/")
slidify("index.Rmd")
ls()
slidify('index.Rmd')
setwd("DS09_Slidify_Pres/Stopping_Distance")
setwd("Stopping_Distance/")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
browseURL("index.html")
browseURL("index.html")
